package com.example.expensetracker.ui.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.expensetracker.data.entity.ChatMessageEntity
import com.example.expensetracker.data.entity.Expense
import com.example.expensetracker.data.repository.ChatRepository
import com.example.expensetracker.data.repository.FirebaseRepository
import com.example.expensetracker.data.service.VoiceRecognitionManager
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import java.util.Date
import javax.inject.Inject

@HiltViewModel
class ChatViewModel @Inject constructor(
    private val chatRepository: ChatRepository,
    private val firebaseRepository: FirebaseRepository,
    val voiceRecognitionManager: VoiceRecognitionManager,
    val receiptScannerManager: com.example.expensetracker.data.service.ReceiptScannerManager
) : ViewModel() {
    
    private val _chatMessages = MutableStateFlow<List<ChatMessageEntity>>(emptyList())
    val chatMessages: StateFlow<List<ChatMessageEntity>> = _chatMessages.asStateFlow()
    
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading.asStateFlow()
    
    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage.asStateFlow()
    
    private val _successMessage = MutableStateFlow<String?>(null)
    val successMessage: StateFlow<String?> = _successMessage.asStateFlow()
    
    private val _currentInput = MutableStateFlow("")
    val currentInput: StateFlow<String> = _currentInput.asStateFlow()
    
    fun clearMessages() {
        _errorMessage.value = null
        _successMessage.value = null
    }
    
    init {
        loadChatHistory()
    }
    
    private fun loadChatHistory() {
        viewModelScope.launch {
            chatRepository.getChatMessages().collect { messages ->
                _chatMessages.value = messages
            }
        }
    }
    
    fun updateInput(input: String) {
        _currentInput.value = input
    }
    
    fun sendMessage(message: String? = null) {
        val messageToSend = message ?: _currentInput.value
        if (messageToSend.isBlank()) return
        
        viewModelScope.launch {
            try {
                _isLoading.value = true
                _errorMessage.value = null
                
                val result = chatRepository.sendMessage(messageToSend)
                
                if (result.isSuccess) {
                    _currentInput.value = ""
                } else {
                    _errorMessage.value = result.exceptionOrNull()?.message ?: "C√≥ l·ªói x·∫£y ra"
                }
            } catch (e: Exception) {
                _errorMessage.value = e.message ?: "C√≥ l·ªói x·∫£y ra"
            } finally {
                _isLoading.value = false
            }
        }
    }
    
    fun clearChatHistory() {
        viewModelScope.launch {
            chatRepository.clearChatHistory()
        }
    }
    
    fun clearError() {
        _errorMessage.value = null
    }
    
    fun deleteMessage(messageId: String) {
        viewModelScope.launch {
            chatRepository.deleteMessage(messageId)
        }
    }
    
    /**
     * Process voice command and perform CRUD operations
     */
    fun processVoiceCommand(voiceText: String) {
        if (voiceText.isBlank()) return
        
        android.util.Log.d("ChatViewModel", "üé§ Processing command: $voiceText")
        
        viewModelScope.launch {
            try {
                _isLoading.value = true
                _errorMessage.value = null
                _successMessage.value = null
                
                // Create prompt for Gemini AI to parse voice command
                val parsePrompt = """
                    Ph√¢n t√≠ch c√¢u l·ªánh gi·ªçng n√≥i sau v√† tr·∫£ v·ªÅ JSON v·ªõi format:
                    {
                      "action": "create" | "read" | "update" | "delete" | "bulk_update" | "bulk_delete",
                      "amount": s·ªë ti·ªÅn m·ªõi (number, optional cho update),
                      "category": "ƒÇn u·ªëng" | "Giao th√¥ng" | "Mua s·∫Øm" | "Gi·∫£i tr√≠" | "Kh√°c" (optional),
                      "title": "t√™n m·ªõi" (optional cho update),
                      "note": "ghi ch√∫ m·ªõi" (optional),
                      "isExpense": true (chi ti√™u) | false (thu nh·∫≠p),
                      "targetKeyword": "t·ª´ kh√≥a t√¨m expense",
                      "bulkMode": "all" | "category" | "keyword" (cho bulk operations),
                      "updateFields": ["amount", "title", "category", "note"] (fields c·∫ßn update),
                      "dateFilter": "today" | "yesterday" | "specific" | "week" | "month" | "none",
                      "dateValue": "DD/MM" ho·∫∑c "MM" (cho specific date/month)
                    }
                    
                    C√¢u l·ªánh: "$voiceText"
                    
                    EXAMPLES:
                    
                    CREATE:
                    - "th√™m chi ti√™u 50k c√† ph√™" => {"action":"create", "amount":50000, "title":"c√† ph√™", "category":"ƒÇn u·ªëng"}
                    
                    UPDATE 1 FIELD:
                    - "s·ª≠a bida th√†nh 100k" => {"action":"update", "targetKeyword":"bida", "amount":100000, "updateFields":["amount"]}
                    
                    UPDATE NHI·ªÄU FIELD:
                    - "c·∫≠p nh·∫≠t test: ƒë·ªïi t√™n test123, category Gi·∫£i tr√≠, 500k" => {"action":"update", "targetKeyword":"test", "title":"test123", "category":"Gi·∫£i tr√≠", "amount":500000, "updateFields":["title","category","amount"]}
                    - "s·ª≠a karaoke th√†nh 200k v√† ƒë·ªïi category th√†nh Gi·∫£i tr√≠" => {"action":"update", "targetKeyword":"karaoke", "amount":200000, "category":"Gi·∫£i tr√≠", "updateFields":["amount","category"]}
                    
                    DELETE 1 EXPENSE:
                    - "x√≥a bida" => {"action":"delete", "targetKeyword":"bida"}
                    
                    BULK DELETE:
                    - "x√≥a to√†n b·ªô chi ti√™u ƒÉn u·ªëng" => {"action":"bulk_delete", "bulkMode":"category", "category":"ƒÇn u·ªëng"}
                    - "x√≥a t·∫•t c·∫£ karaoke" => {"action":"bulk_delete", "bulkMode":"keyword", "targetKeyword":"karaoke"}
                    - "x√≥a h·∫øt chi ti√™u gi·∫£i tr√≠" => {"action":"bulk_delete", "bulkMode":"category", "category":"Gi·∫£i tr√≠"}
                    
                    BULK UPDATE:
                    - "c·∫≠p nh·∫≠t t·∫•t c·∫£ karaoke th√†nh 200k" => {"action":"bulk_update", "bulkMode":"keyword", "targetKeyword":"karaoke", "amount":200000, "updateFields":["amount"]}
                    - "s·ª≠a h·∫øt ƒÉn u·ªëng th√†nh category Kh√°c" => {"action":"bulk_update", "bulkMode":"category", "category":"ƒÇn u·ªëng", "updateFields":["category"]}
                    
                    DATE FILTERS:
                    - "x√≥a chi ti√™u h√¥m nay" => {"action":"bulk_delete", "bulkMode":"all", "dateFilter":"today"}
                    - "s·ª≠a chi ti√™u h√¥m qua th√†nh 100k" => {"action":"bulk_update", "bulkMode":"all", "amount":100000, "dateFilter":"yesterday", "updateFields":["amount"]}
                    - "x√≥a chi ti√™u ng√†y 25/10" => {"action":"bulk_delete", "bulkMode":"all", "dateFilter":"specific", "dateValue":"25/10"}
                    - "x√≥a chi ti√™u tu·∫ßn n√†y" => {"action":"bulk_delete", "bulkMode":"all", "dateFilter":"week"}
                    - "x√≥a chi ti√™u th√°ng 10" => {"action":"bulk_delete", "bulkMode":"all", "dateFilter":"month", "dateValue":"10"}
                    - "x√≥a chi ti√™u ƒÉn u·ªëng h√¥m nay" => {"action":"bulk_delete", "bulkMode":"category", "category":"ƒÇn u·ªëng", "dateFilter":"today"}
                    
                    RULES:
                    - S·ªë ti·ªÅn: 50k=50000, 2 tri·ªáu=2000000
                    - bulkMode: "category" (theo category), "keyword" (theo t·ª´ kh√≥a), "all" (t·∫•t c·∫£)
                    - updateFields: list c√°c field c·∫ßn update
                    - dateFilter: "today" (h√¥m nay), "yesterday" (h√¥m qua), "specific" (ng√†y c·ª• th·ªÉ), "week" (tu·∫ßn n√†y), "month" (th√°ng), "none" (kh√¥ng filter)
                    - dateValue: ch·ªâ c√≥ khi dateFilter = "specific" ho·∫∑c "month"
                    
                    CH·ªà tr·∫£ v·ªÅ JSON, kh√¥ng th√™m text kh√°c.
                """.trimIndent()
                
                // Send to Gemini AI to parse
                val parseResult = chatRepository.sendMessage(parsePrompt)
                
                if (parseResult.isFailure) {
                    _errorMessage.value = "Kh√¥ng th·ªÉ ph√¢n t√≠ch l·ªánh: ${parseResult.exceptionOrNull()?.message}"
                    return@launch
                }
                
                // Wait a bit for AI response to be saved to database
                delay(1000)
                
                // Get last AI message (not user message)
                val messages = _chatMessages.value
                val aiMessage = messages.lastOrNull { !it.isUser }
                
                if (aiMessage == null) {
                    android.util.Log.e("ChatViewModel", "‚ùå No AI response found")
                    _errorMessage.value = "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI"
                    return@launch
                }
                
                val aiResponse = aiMessage.content
                android.util.Log.d("ChatViewModel", "ü§ñ AI Response: $aiResponse")
                
                // Parse JSON response
                val actionResult = parseAndExecuteAction(aiResponse, voiceText)
                
                if (actionResult != null) {
                    // Success - show confirmation
                    val confirmationMessage = when {
                        actionResult.startsWith("ƒê√£ th√™m") -> "‚úÖ $actionResult"
                        actionResult.startsWith("ƒê√£ x√≥a") -> "üóëÔ∏è $actionResult"
                        actionResult.startsWith("ƒê√£ c·∫≠p nh·∫≠t") -> "‚úèÔ∏è $actionResult"
                        else -> actionResult
                    }
                    
                    android.util.Log.d("ChatViewModel", "‚úÖ Success: $confirmationMessage")
                    _successMessage.value = confirmationMessage
                } else {
                    android.util.Log.w("ChatViewModel", "‚ö†Ô∏è No action result")
                }
                
            } catch (e: Exception) {
                android.util.Log.e("ChatViewModel", "‚ùå Error: ${e.message}", e)
                _errorMessage.value = "L·ªói x·ª≠ l√Ω l·ªánh: ${e.message}"
            } finally {
                _isLoading.value = false
            }
        }
    }
    
    /**
     * Parse AI response and execute action
     */
    private suspend fun parseAndExecuteAction(aiResponse: String, originalCommand: String): String? {
        return try {
            // Remove markdown code fence and normalize whitespace
            val cleanResponse = aiResponse
                .replace("```json", "")
                .replace("```", "")
                .replace("\n", " ")  // Replace newlines with space
                .replace(Regex("\\s+"), " ")  // Replace multiple spaces with single space
                .trim()
            
            android.util.Log.d("ChatViewModel", "üìã Clean Response: $cleanResponse")
            
            // Simple JSON parsing (you might want to use Gson/Moshi for production)
            val action = extractJsonValue(cleanResponse, "action")
            val amountStr = extractJsonValue(cleanResponse, "amount")
            val category = extractJsonValue(cleanResponse, "category") ?: "Kh√°c"
            val title = extractJsonValue(cleanResponse, "title") ?: originalCommand
            val note = extractJsonValue(cleanResponse, "note") ?: ""
            val isExpense = extractJsonValue(cleanResponse, "isExpense")?.toBoolean() ?: true
            
            when (action) {
                "create" -> {
                    val amount = amountStr?.toLongOrNull() ?: 0L
                    if (amount == 0L) {
                        _errorMessage.value = "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c s·ªë ti·ªÅn. Vui l√≤ng n√≥i r√µ h∆°n."
                        return null
                    }
                    
                    val expense = Expense(
                        title = title,
                        amount = amount,
                        category = category,
                        date = Date(),
                        note = note,
                        isExpense = isExpense,
                        createdAt = Date(),
                        updatedAt = Date()
                    )
                    
                    val result = firebaseRepository.addExpense(expense)
                    if (result.isSuccess) {
                        val type = if (isExpense) "chi ti√™u" else "thu nh·∫≠p"
                        "ƒê√£ th√™m $type: $title - ${formatMoney(amount)} ($category)"
                    } else {
                        _errorMessage.value = "Kh√¥ng th·ªÉ th√™m chi ti√™u: ${result.exceptionOrNull()?.message}"
                        null
                    }
                }
                
                "read" -> {
                    "ƒê·ªÉ xem chi ti√™u, vui l√≤ng v√†o tab Chi ti√™u ho·∫∑c B√°o c√°o."
                }
                
                "update" -> {
                    val targetKeyword = extractJsonValue(cleanResponse, "targetKeyword")
                    if (targetKeyword.isNullOrBlank()) {
                        _errorMessage.value = "Kh√¥ng r√µ c·∫ßn s·ª≠a kho·∫£n n√†o. VD: 'S·ª≠a chi ti√™u bida th√†nh 100k'"
                        return null
                    }
                    
                    // T√¨m expense matching v·ªõi keyword
                    val expensesResult = firebaseRepository.getExpenses()
                    if (expensesResult.isFailure) {
                        _errorMessage.value = "Kh√¥ng th·ªÉ l·∫•y danh s√°ch chi ti√™u: ${expensesResult.exceptionOrNull()?.message}"
                        return null
                    }
                    
                    val expenses = expensesResult.getOrNull() ?: emptyList()
                    val matchingExpense = expenses.firstOrNull { 
                        it.title.contains(targetKeyword, ignoreCase = true)
                    }
                    
                    if (matchingExpense == null) {
                        _errorMessage.value = "Kh√¥ng t√¨m th·∫•y kho·∫£n '$targetKeyword' ƒë·ªÉ s·ª≠a."
                        return null
                    }
                    
                    // Build updated expense with only changed fields
                    var updatedExpense: Expense = matchingExpense
                    val changes = mutableListOf<String>()
                    
                    // Check what fields need to be updated
                    amountStr?.toLongOrNull()?.let { newAmount ->
                        updatedExpense = updatedExpense.copy(amount = newAmount)
                        changes.add("s·ªë ti·ªÅn ‚Üí ${formatMoney(newAmount)}")
                    }
                    
                    if (!title.isNullOrBlank() && title != originalCommand && title != targetKeyword) {
                        updatedExpense = updatedExpense.copy(title = title)
                        changes.add("t√™n ‚Üí $title")
                    }
                    
                    if (!category.isNullOrBlank() && category != "Kh√°c") {
                        updatedExpense = updatedExpense.copy(category = category)
                        changes.add("danh m·ª•c ‚Üí $category")
                    }
                    
                    if (!note.isNullOrBlank()) {
                        updatedExpense = updatedExpense.copy(note = note)
                        changes.add("ghi ch√∫")
                    }
                    
                    if (changes.isEmpty()) {
                        _errorMessage.value = "Kh√¥ng c√≥ g√¨ ƒë·ªÉ c·∫≠p nh·∫≠t"
                        return null
                    }
                    
                    val result = firebaseRepository.updateExpense(updatedExpense)
                    if (result.isSuccess) {
                        "ƒê√£ s·ª≠a '$targetKeyword': ${changes.joinToString(", ")}"
                    } else {
                        _errorMessage.value = "Kh√¥ng th·ªÉ s·ª≠a chi ti√™u: ${result.exceptionOrNull()?.message}"
                        null
                    }
                }
                
                "delete" -> {
                    val targetKeyword = extractJsonValue(cleanResponse, "targetKeyword")
                    if (targetKeyword.isNullOrBlank()) {
                        _errorMessage.value = "Kh√¥ng r√µ c·∫ßn x√≥a kho·∫£n n√†o. VD: 'X√≥a chi ti√™u bida'"
                        return null
                    }
                    
                    // T√¨m expense matching v·ªõi keyword
                    val expensesResult = firebaseRepository.getExpenses()
                    if (expensesResult.isFailure) {
                        _errorMessage.value = "Kh√¥ng th·ªÉ l·∫•y danh s√°ch chi ti√™u: ${expensesResult.exceptionOrNull()?.message}"
                        return null
                    }
                    
                    val expenses = expensesResult.getOrNull() ?: emptyList()
                    val matchingExpense = expenses.firstOrNull { 
                        it.title.contains(targetKeyword, ignoreCase = true)
                    }
                    
                    if (matchingExpense == null) {
                        _errorMessage.value = "Kh√¥ng t√¨m th·∫•y kho·∫£n '$targetKeyword' ƒë·ªÉ x√≥a."
                        return null
                    }
                    
                    val result = firebaseRepository.deleteExpense(matchingExpense.id)
                    if (result.isSuccess) {
                        "ƒê√£ x√≥a chi ti√™u: ${matchingExpense.title} - ${formatMoney(matchingExpense.amount)}"
                    } else {
                        _errorMessage.value = "Kh√¥ng th·ªÉ x√≥a chi ti√™u: ${result.exceptionOrNull()?.message}"
                        null
                    }
                }
                
                "bulk_update" -> {
                    val bulkMode = extractJsonValue(cleanResponse, "bulkMode")
                    val dateFilter = extractJsonValue(cleanResponse, "dateFilter")
                    val dateValue = extractJsonValue(cleanResponse, "dateValue")
                    
                    // L·∫•y danh s√°ch expenses
                    val expensesResult = firebaseRepository.getExpenses()
                    if (expensesResult.isFailure) {
                        _errorMessage.value = "Kh√¥ng th·ªÉ l·∫•y danh s√°ch chi ti√™u"
                        return null
                    }
                    
                    val allExpenses = expensesResult.getOrNull() ?: emptyList()
                    
                    // Filter expenses theo bulkMode
                    var targetExpenses = when (bulkMode) {
                        "all" -> {
                            // C·∫≠p nh·∫≠t T·∫§T C·∫¢ expenses
                            allExpenses
                        }
                        "category" -> {
                            val targetCategory = category
                            allExpenses.filter { it.category.equals(targetCategory, ignoreCase = true) }
                        }
                        "keyword" -> {
                            val targetKeyword = extractJsonValue(cleanResponse, "targetKeyword")
                            if (targetKeyword.isNullOrBlank()) {
                                _errorMessage.value = "Kh√¥ng r√µ t·ª´ kh√≥a ƒë·ªÉ t√¨m"
                                return null
                            }
                            allExpenses.filter { it.title.contains(targetKeyword, ignoreCase = true) }
                        }
                        else -> {
                            _errorMessage.value = "Kh√¥ng h·ªó tr·ª£ bulkMode: $bulkMode"
                            return null
                        }
                    }
                    
                    // Apply date filter
                    targetExpenses = filterExpensesByDate(targetExpenses, dateFilter, dateValue)
                    
                    if (targetExpenses.isEmpty()) {
                        _errorMessage.value = "Kh√¥ng t√¨m th·∫•y kho·∫£n n√†o ƒë·ªÉ c·∫≠p nh·∫≠t"
                        return null
                    }
                    
                    // Update t·ª´ng expense
                    var successCount = 0
                    targetExpenses.forEach { expense ->
                        var updated = expense
                        
                        amountStr?.toLongOrNull()?.let { updated = updated.copy(amount = it) }
                        if (!title.isNullOrBlank() && title != originalCommand) {
                            updated = updated.copy(title = title)
                        }
                        if (!category.isNullOrBlank() && category != "Kh√°c" && bulkMode != "category") {
                            updated = updated.copy(category = category)
                        }
                        if (!note.isNullOrBlank()) {
                            updated = updated.copy(note = note)
                        }
                        
                        if (firebaseRepository.updateExpense(updated).isSuccess) {
                            successCount++
                        }
                    }
                    
                    if (successCount > 0) {
                        "ƒê√£ c·∫≠p nh·∫≠t $successCount kho·∫£n chi ti√™u"
                    } else {
                        _errorMessage.value = "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t"
                        null
                    }
                }
                
                "bulk_delete" -> {
                    val bulkMode = extractJsonValue(cleanResponse, "bulkMode")
                    val dateFilter = extractJsonValue(cleanResponse, "dateFilter")
                    val dateValue = extractJsonValue(cleanResponse, "dateValue")
                    
                    // L·∫•y danh s√°ch expenses
                    val expensesResult = firebaseRepository.getExpenses()
                    if (expensesResult.isFailure) {
                        _errorMessage.value = "Kh√¥ng th·ªÉ l·∫•y danh s√°ch chi ti√™u"
                        return null
                    }
                    
                    val allExpenses = expensesResult.getOrNull() ?: emptyList()
                    
                    // Filter expenses theo bulkMode
                    var targetExpenses = when (bulkMode) {
                        "all" -> {
                            // X√≥a T·∫§T C·∫¢ expenses
                            allExpenses
                        }
                        "category" -> {
                            val targetCategory = category
                            allExpenses.filter { it.category.equals(targetCategory, ignoreCase = true) }
                        }
                        "keyword" -> {
                            val targetKeyword = extractJsonValue(cleanResponse, "targetKeyword")
                            if (targetKeyword.isNullOrBlank()) {
                                _errorMessage.value = "Kh√¥ng r√µ t·ª´ kh√≥a ƒë·ªÉ t√¨m"
                                return null
                            }
                            allExpenses.filter { it.title.contains(targetKeyword, ignoreCase = true) }
                        }
                        else -> {
                            _errorMessage.value = "Kh√¥ng h·ªó tr·ª£ bulkMode: $bulkMode"
                            return null
                        }
                    }
                    
                    // Apply date filter
                    targetExpenses = filterExpensesByDate(targetExpenses, dateFilter, dateValue)
                    
                    if (targetExpenses.isEmpty()) {
                        _errorMessage.value = "Kh√¥ng t√¨m th·∫•y kho·∫£n n√†o ƒë·ªÉ x√≥a"
                        return null
                    }
                    
                    // X√≥a t·ª´ng expense
                    var successCount = 0
                    targetExpenses.forEach { expense ->
                        if (firebaseRepository.deleteExpense(expense.id).isSuccess) {
                            successCount++
                        }
                    }
                    
                    if (successCount > 0) {
                        "ƒê√£ x√≥a $successCount kho·∫£n chi ti√™u"
                    } else {
                        _errorMessage.value = "Kh√¥ng th·ªÉ x√≥a"
                        null
                    }
                }
                
                else -> {
                    _errorMessage.value = "Kh√¥ng hi·ªÉu l·ªánh. H√£y th·ª≠: 'Th√™m chi ti√™u 50k c√† ph√™' ho·∫∑c 'Th√™m thu nh·∫≠p 5 tri·ªáu l∆∞∆°ng'"
                    null
                }
            }
        } catch (e: Exception) {
            _errorMessage.value = "L·ªói ph√¢n t√≠ch: ${e.message}"
            null
        }
    }
    
    /**
     * Extract value from JSON string (simple parser)
     */
    private fun extractJsonValue(json: String, key: String): String? {
        return try {
            // Try string pattern
            val pattern = """"$key"\s*:\s*"([^"]*)"""".toRegex()
            val match = pattern.find(json)
            val result = match?.groupValues?.get(1)
            if (result != null) {
                android.util.Log.d("ChatViewModel", "üîç Extracted '$key': '$result' (string)")
                return result
            }
            
            // Try number pattern
            val numberPattern = """"$key"\s*:\s*(\d+)""".toRegex()
            val numberMatch = numberPattern.find(json)
            val numberResult = numberMatch?.groupValues?.get(1)
            if (numberResult != null) {
                android.util.Log.d("ChatViewModel", "üîç Extracted '$key': '$numberResult' (number)")
                return numberResult
            }
            
            // Try boolean pattern
            val boolPattern = """"$key"\s*:\s*(true|false)""".toRegex()
            val boolMatch = boolPattern.find(json)
            val boolResult = boolMatch?.groupValues?.get(1)
            if (boolResult != null) {
                android.util.Log.d("ChatViewModel", "üîç Extracted '$key': '$boolResult' (boolean)")
                return boolResult
            }
            
            android.util.Log.w("ChatViewModel", "‚ö†Ô∏è Could not extract '$key' from JSON")
            null
        } catch (e: Exception) {
            android.util.Log.e("ChatViewModel", "‚ùå Error extracting '$key': ${e.message}")
            null
        }
    }
    
    /**
     * Filter expenses by date based on dateFilter and dateValue
     */
    private fun filterExpensesByDate(
        expenses: List<Expense>,
        dateFilter: String?,
        dateValue: String?
    ): List<Expense> {
        if (dateFilter == null || dateFilter == "none") {
            return expenses
        }
        
        val calendar = java.util.Calendar.getInstance()
        val today = calendar.time
        
        return when (dateFilter) {
            "today" -> {
                // Filter expenses from today
                calendar.set(java.util.Calendar.HOUR_OF_DAY, 0)
                calendar.set(java.util.Calendar.MINUTE, 0)
                calendar.set(java.util.Calendar.SECOND, 0)
                calendar.set(java.util.Calendar.MILLISECOND, 0)
                val startOfDay = calendar.time
                
                expenses.filter { it.date >= startOfDay }
            }
            
            "yesterday" -> {
                // Filter expenses from yesterday
                calendar.add(java.util.Calendar.DAY_OF_YEAR, -1)
                calendar.set(java.util.Calendar.HOUR_OF_DAY, 0)
                calendar.set(java.util.Calendar.MINUTE, 0)
                calendar.set(java.util.Calendar.SECOND, 0)
                calendar.set(java.util.Calendar.MILLISECOND, 0)
                val startOfYesterday = calendar.time
                
                calendar.add(java.util.Calendar.DAY_OF_YEAR, 1)
                val startOfToday = calendar.time
                
                expenses.filter { it.date >= startOfYesterday && it.date < startOfToday }
            }
            
            "week" -> {
                // Filter expenses from this week (Monday - Sunday)
                calendar.set(java.util.Calendar.DAY_OF_WEEK, java.util.Calendar.MONDAY)
                calendar.set(java.util.Calendar.HOUR_OF_DAY, 0)
                calendar.set(java.util.Calendar.MINUTE, 0)
                calendar.set(java.util.Calendar.SECOND, 0)
                calendar.set(java.util.Calendar.MILLISECOND, 0)
                val startOfWeek = calendar.time
                
                expenses.filter { it.date >= startOfWeek }
            }
            
            "month" -> {
                // Filter expenses from specified month or current month
                val monthValue = dateValue?.toIntOrNull() ?: (calendar.get(java.util.Calendar.MONTH) + 1)
                val currentYear = calendar.get(java.util.Calendar.YEAR)
                
                calendar.set(currentYear, monthValue - 1, 1, 0, 0, 0)
                calendar.set(java.util.Calendar.MILLISECOND, 0)
                val startOfMonth = calendar.time
                
                calendar.add(java.util.Calendar.MONTH, 1)
                val startOfNextMonth = calendar.time
                
                expenses.filter { it.date >= startOfMonth && it.date < startOfNextMonth }
            }
            
            "specific" -> {
                // Filter expenses from specific date (DD/MM)
                if (dateValue == null) return expenses
                
                val parts = dateValue.split("/")
                if (parts.size != 2) return expenses
                
                val day = parts[0].toIntOrNull() ?: return expenses
                val month = parts[1].toIntOrNull() ?: return expenses
                val currentYear = calendar.get(java.util.Calendar.YEAR)
                
                calendar.set(currentYear, month - 1, day, 0, 0, 0)
                calendar.set(java.util.Calendar.MILLISECOND, 0)
                val startOfDay = calendar.time
                
                calendar.add(java.util.Calendar.DAY_OF_YEAR, 1)
                val startOfNextDay = calendar.time
                
                expenses.filter { it.date >= startOfDay && it.date < startOfNextDay }
            }
            
            else -> expenses
        }
    }
    
    /**
     * Format money with Vietnamese format
     */
    private fun formatMoney(amount: Long): String {
        return when {
            amount >= 1_000_000 -> "${amount / 1_000_000} tri·ªáu ƒë·ªìng"
            amount >= 1_000 -> "${amount / 1_000}k ƒë·ªìng"
            else -> "$amount ƒë·ªìng"
        }
    }
    
    /**
     * Process scanned receipt data from Gemini Vision API
     */
    fun processReceiptData(jsonResponse: String) {
        viewModelScope.launch {
            try {
                android.util.Log.d("ChatViewModel", "üìä Processing receipt data: $jsonResponse")
                
                _isLoading.value = true
                
                // Clean response (remove markdown code fences if present)
                val cleanResponse = jsonResponse
                    .replace("```json", "")
                    .replace("```", "")
                    .trim()
                
                android.util.Log.d("ChatViewModel", "üßπ Clean response: $cleanResponse")
                
                // Extract values from JSON
                val amountStr = extractJsonValue(cleanResponse, "amount")
                val title = extractJsonValue(cleanResponse, "title")
                val category = extractJsonValue(cleanResponse, "category")
                val dateStr = extractJsonValue(cleanResponse, "date")
                val note = extractJsonValue(cleanResponse, "note")
                val merchant = extractJsonValue(cleanResponse, "merchant")
                
                android.util.Log.d("ChatViewModel", "üìù Extracted - amount: $amountStr, title: $title, category: $category")
                
                // Parse amount
                val amount = try {
                    amountStr?.replace("[^0-9.]".toRegex(), "")?.toDoubleOrNull() ?: 0.0
                } catch (e: Exception) {
                    android.util.Log.e("ChatViewModel", "Error parsing amount: ${e.message}")
                    0.0
                }
                
                // Parse date
                val date = try {
                    if (!dateStr.isNullOrBlank() && dateStr != "null") {
                        val formatter = java.text.SimpleDateFormat("dd/MM/yyyy", java.util.Locale.getDefault())
                        formatter.parse(dateStr) ?: Date()
                    } else {
                        Date()
                    }
                } catch (e: Exception) {
                    android.util.Log.w("ChatViewModel", "Using current date: ${e.message}")
                    Date()
                }
                
                // Create expense note
                val fullNote = buildString {
                    if (!merchant.isNullOrBlank() && merchant != "null") {
                        append("C·ª≠a h√†ng: $merchant\n")
                    }
                    if (!note.isNullOrBlank() && note != "null") {
                        append(note)
                    }
                    if (isEmpty()) {
                        append("Scan t·ª´ h√≥a ƒë∆°n")
                    }
                }
                
                // Create expense
                val expense = Expense(
                    id = "",
                    title = if (!title.isNullOrBlank() && title != "null") title else "Chi ti√™u t·ª´ h√≥a ƒë∆°n",
                    amount = amount.toLong(),
                    category = if (!category.isNullOrBlank() && category != "null") category else "Kh√°c",
                    date = date,
                    note = fullNote,
                    isExpense = true
                )
                
                android.util.Log.d("ChatViewModel", "üí∞ Creating expense: $expense")
                
                // Save to Firebase
                firebaseRepository.addExpense(expense)
                
                _successMessage.value = "‚úÖ ƒê√£ th√™m chi ti√™u ${formatMoney(amount.toLong())} t·ª´ h√≥a ƒë∆°n!"
                _isLoading.value = false
                
                android.util.Log.d("ChatViewModel", "‚úÖ Receipt processed successfully")
                
            } catch (e: Exception) {
                android.util.Log.e("ChatViewModel", "‚ùå Error processing receipt: ${e.message}", e)
                _errorMessage.value = "L·ªói x·ª≠ l√Ω h√≥a ƒë∆°n: ${e.message}"
                _isLoading.value = false
            }
        }
    }
}
